import logging
from typing import List, Dict, Any

from integration_utils.bitrix24.models import BitrixUserToken

logger = logging.getLogger(__name__)


class Bitrix24Service:
    """–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    def __init__(self, user_token: BitrixUserToken):
        self.user_token = user_token
    
    def delete_priority_field(self) -> Dict[str, Any]:
        """–£–¥–∞–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–¥–µ–ª–∫–∏'"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—è
            response = self.user_token.call_api_method('crm.deal.userfield.list', {})
            field_id = None
            if response.get('result'):
                for field in response['result']:
                    if field.get('FIELD_NAME') == 'UF_CRM_DEAL_PRIORITY':
                        field_id = field.get('ID')
                        break
            
            if field_id:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ
                delete_response = self.user_token.call_api_method('crm.deal.userfield.delete', {
                    'id': field_id
                })
                
                if delete_response.get('result'):
                    print(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–¥–µ–ª–∫–∏' —É–¥–∞–ª–µ–Ω–æ —Å ID: {field_id}")
                    return {'success': True, 'message': '–ü–æ–ª–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'}
                else:
                    return {'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—è'}
            else:
                return {'success': False, 'message': '–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è: {e}")
            return {'success': False, 'message': str(e)}

    def create_priority_field(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–¥–µ–ª–∫–∏' –∏—Å–ø–æ–ª—å–∑—É—è call_api_method"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ —Ç–∏–ø–∞ enumeration (—Å–ø–∏—Å–æ–∫)
            response = self.user_token.call_api_method('crm.deal.userfield.add', {
                'fields': {
                    'USER_TYPE_ID': 'enumeration',
                    'FIELD_NAME': 'DEAL_PRIORITY',
                    'LABEL': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–¥–µ–ª–∫–∏',
                    'LIST_FILTER_LABEL': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–¥–µ–ª–∫–∏',
                    'LIST_COLUMN_LABEL': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                    'EDIT_FORM_LABEL': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–¥–µ–ª–∫–∏',
                    'HELP_MESSAGE': '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏',
                    'MANDATORY': 'Y',  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                    'SHOW_FILTER': 'Y',  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ñ–∏–ª—å—Ç—Ä–µ
                    'SHOW_IN_LIST': 'Y',  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ
                    'EDIT_IN_LIST': 'Y',  # –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
                    'SORT': 500,
                    'LIST': [
                        {'VALUE': '–í—ã—Å–æ–∫–∏–π', 'SORT': 100, 'DEF': 'N', 'XML_ID': '3'},
                        {'VALUE': '–°—Ä–µ–¥–Ω–∏–π', 'SORT': 200, 'DEF': 'Y', 'XML_ID': '2'},
                        {'VALUE': '–ù–∏–∑–∫–∏–π', 'SORT': 300, 'DEF': 'N', 'XML_ID': '1'}
                    ]
                }
            })
            
            if response.get('result'):
                logger.info(f"–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–¥–µ–ª–∫–∏' —Å–æ–∑–¥–∞–Ω–æ —Å ID: {response['result']}")
                return {
                    'success': True,
                    'field_id': response['result'],
                    'message': '–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ',
                    'already_exists': False
                }
            
            return {'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è'}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è: {e}")
            return {'success': False, 'message': str(e)}
    
    def get_user_deals(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = self.user_token.call_api_method('crm.deal.list', {
                'filter': {
                    'ASSIGNED_BY_ID': self.user_token.user.bitrix_id,
                    'CLOSED': 'N'  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                },
                'select': [
                    'ID', 'TITLE', 'OPPORTUNITY', 'CURRENCY_ID', 
                    'PROBABILITY', 'BEGINDATE', 'CLOSEDATE', 'DATE_CREATE',
                    'UF_CRM_DEAL_PRIORITY'  # –ö–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                ],
                'order': {'DATE_CREATE': 'DESC'},
                'start': 0
            })
            
            if response.get('result'):
                deals = response['result'][:limit]
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                for deal in deals:
                    print(deal)
                    priority_value = deal.get('UF_CRM_DEAL_PRIORITY')
                    print(f"üîç –°–¥–µ–ª–∫–∞ {deal.get('ID')}: –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ = {priority_value} (—Ç–∏–ø: {type(priority_value)})")
                    
                    if priority_value is not None and priority_value != '':
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ
                        if str(priority_value) == '1':
                            deal['UF_CRM_DEAL_PRIORITY'] = 'low'
                            print(f"  ‚úÖ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ 'low' (–ù–∏–∑–∫–∏–π)")
                        elif str(priority_value) == '2':
                            deal['UF_CRM_DEAL_PRIORITY'] = 'medium'
                            print(f"  ‚úÖ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ 'medium' (–°—Ä–µ–¥–Ω–∏–π)")
                        elif str(priority_value) == '3':
                            deal['UF_CRM_DEAL_PRIORITY'] = 'high'
                            print(f"  ‚úÖ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ 'high' (–í—ã—Å–æ–∫–∏–π)")
                        elif str(priority_value) == '0':
                            print(f"  ‚ùì –∑–Ω–∞—á–µ–Ω–∏–µ 0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None")
                            # –ó–Ω–∞—á–µ–Ω–∏–µ 0 –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
                            deal['UF_CRM_DEAL_PRIORITY'] = None
                    else:
                        print(f"  ‚ùå –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                return deals
            
            return []
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")
            return []
    
    def create_deal(self, deal_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –≤ –ë–∏—Ç—Ä–∏–∫—Å24"""
        try:
            fields = {
                'TITLE': deal_data['title'],
                'OPPORTUNITY': float(deal_data['opportunity']),
                'CURRENCY_ID': deal_data['currency_id'],
                'PROBABILITY': int(deal_data['probability']),
                'BEGINDATE': deal_data['begin_date'].strftime('%Y-%m-%d'),
                'CLOSEDATE': deal_data['close_date'].strftime('%Y-%m-%d'),
                'COMMENTS': deal_data.get('comments', ''),
                'ASSIGNED_BY_ID': self.user_token.user.bitrix_id,
                'UF_CRM_DEAL_PRIORITY' : deal_data['priority']
            }
            
            response = self.user_token.call_api_method('crm.deal.add', {
                'fields': fields
            })
            
            if response.get('result'):
                return {
                    'success': True,
                    'deal_id': response['result'],
                    'message': '–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
                }
            
            return {'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏'}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
            return {'success': False, 'message': str(e)}
